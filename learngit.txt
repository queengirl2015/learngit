安装：命令行输入git，显示没安装的话根据提示安装
$ sudo apt-get install git

创建版本库：切换到要创建版本库的目录
$ git init

添加文件到仓库：
$ git add readme.txt

提交文件到仓库：
$ git commit -m "wrote a readme file"

查看仓库状态：
$ git status

查看具体修改内容：
$ git diff readme.txt 

查看仓库的版本：
$ git log

版本回退：
$ git reset --hard HEAD^
$ git reset --hard HEAD～233
$ git reset --hard ef2eacff3

查看git命令历史记录：
$ git reflog

撤销工作区更改：
$ git checkout -- readme.txt
命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态
撤销暂存区更改：
$ git reset HEAD file
**************
小结：
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

删除文件相关：
删除版本库中文件：
$ git rm
恢复工作区被删除文件：
$ git checkout -- test.txt

关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
关联后，使用命令git push -u origin master第一次推送master分支的所有内容
之后提交就用：
$ git push origin master

Git鼓励大量使用分支：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>

当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
用git log --graph命令可以看到分支合并图
$ git log --graph --pretty=oneline --abbrev-commit
用git log 显示太多按Q可退出

合并建禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息：
$ git merge --no-ff -m "merge with no-ff" dev

bug处理 (假设bug在master上)：
1.保存当前工作现场：$ git stash
2.切换到master分支：$ git checkout master
3.从master新建并切换到bug处理分支：$ git checkout -b issue-101
4.修复bug，并且add、commit：$ git add bug.py、$ git commit -m "fix bug 101"
5.切换到master分支：$ git checkout master
6.合并bug分支：$ git merge --no-ff -m "merged bug fix 101" issue-101
7.删除bug分支：$ git branch -d issue-101
8.切换回dev分支：$ git checkout dev
9.恢复工作现场：$ git stash pop

新功能添加：
新建个分支玩就好：$ git checkout -b feature-vulcan

多人协作：
  1. 首先，可以试图用git push origin branch-name推送自己的修改；
  2. 如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
  3. 如果合并有冲突，则解决冲突，并在本地提交；
  4. 没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。

  ● 查看远程库信息，使用git remote -v；
  ● 本地新建的分支如果不推送到远程，对其他人就是不可见的；
  ● 从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
  ● 从远程库clone，默认下只有master分支，在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
  ● 建立本地分支和远程分支的关联，使用git branch --set-upstream-to=origin/branch-name；
  ● 从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
  ● 删除远程分支：git push origin --delete <branch_name>






